---
import ClienteLayout from '../../../layouts/ClienteLayout.astro';
import { getPlanoById } from '../../../lib/db.js';
import { isAuthenticated } from '../../../lib/auth.js';

// Definir la interfaz para los planos
interface Plano {
  id: number;
  nombre: string;
  tipo: string;
  fecha_subida: string;
  archivo_url: string;
  usuario_id: number;
  descripcion?: string;
}

// Obtener el usuario autenticado
const usuario = isAuthenticated(Astro.request);

// Redirigir si no está autenticado o no es cliente
if (!usuario || usuario.tipo.toLowerCase() !== 'cliente') {
  return Astro.redirect('/login');
}

// Obtener el ID del plano de los parámetros de la URL
const { id } = Astro.params;

// Obtener información del plano
let plano: Plano | null = null;
let error = null;

try {
  if (id) {
    const result = await getPlanoById(parseInt(id));
    plano = result;
    
    // Verificar que el plano pertenece al usuario actual
    if (!plano || plano.usuario_id !== usuario.id) {
      error = "No tiene acceso a este plano o el plano no existe.";
      plano = null;
    }
  } else {
    error = "ID de plano no proporcionado";
  }
} catch (err) {
  console.error("Error al obtener plano:", err);
  error = "Error al cargar el plano. Por favor, inténtelo de nuevo más tarde.";
}
---

<ClienteLayout title={plano ? plano.nombre : "Detalle de Plano"} activeLink="planos">
<div class="flex flex-col gap-6">
  <div class="flex items-center gap-2">
    <a href="/cliente" class="text-primary hover:underline flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 mr-1">
        <path d="m15 18-6-6 6-6"></path>
      </svg>
      Volver a Mis Planos
    </a>
  </div>
  
  {error && (
    <div class="bg-destructive/15 text-destructive p-4 rounded-md">
      <p>{error}</p>
    </div>
  )}
  
  {plano && (
    <div class="rounded-lg border shadow-sm">
      <div class="p-6">
        <h1 class="text-2xl font-bold tracking-tight mb-4">{plano.nombre}</h1>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h2 class="text-lg font-semibold mb-2">Información del Plano</h2>
            <dl class="space-y-2">
              <div class="flex flex-col">
                <dt class="text-sm font-medium text-muted-foreground">Tipo</dt>
                <dd>{plano.tipo}</dd>
              </div>
              <div class="flex flex-col">
                <dt class="text-sm font-medium text-muted-foreground">Fecha de Subida</dt>
                <dd>{new Date(plano.fecha_subida).toLocaleDateString()}</dd>
              </div>
            </dl>
          </div>
          
          <div>
            <h2 class="text-lg font-semibold mb-2">Descripción</h2>
            <div class="max-h-60 overflow-auto rounded-md p-2 bg-muted/20">
              <p class="text-muted-foreground break-words whitespace-pre-wrap">{plano.descripcion || 'Sin descripción'}</p>
            </div>
          </div>
        </div>
        
        <div class="flex justify-center">
          <a 
            href={plano.archivo_url}
            target="_blank"
            class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 download-btn"
            data-plano-id={plano.id}
            data-usuario-id={usuario.id}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-5 w-5">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
              <polyline points="7 10 12 15 17 10"></polyline>
              <line x1="12" y1="15" x2="12" y2="3"></line>
            </svg>
            Descargar Plano
          </a>
        </div>
      </div>
    </div>
  )}
</div>
</ClienteLayout>

<script define:vars={{ usuarioId: usuario.id }}>
  // Función para registrar la descarga en el historial
  async function registrarDescarga(planoId, userId) {
    try {
      console.log(`Registrando descarga: plano=${planoId}, usuario=${userId}`);
      
      const response = await fetch('/api/registrar-descarga', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          plano_id: planoId,
          usuario_id: userId
        }),
      });
      
      const data = await response.json();
      console.log('Respuesta del servidor:', data);
      
      if (!data.success) {
        console.error('Error al registrar descarga:', data.error);
      }
    } catch (error) {
      console.error('Error al registrar descarga:', error);
    }
  }
  
  // Agregar event listeners a todos los botones de descarga
  document.addEventListener('DOMContentLoaded', () => {
    const downloadButtons = document.querySelectorAll('.download-btn');
    
    downloadButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        // No prevenir el comportamiento predeterminado para permitir la descarga
        const planoId = this.getAttribute('data-plano-id');
        const userId = this.getAttribute('data-usuario-id') || usuarioId;
        
        // Registrar la descarga
        registrarDescarga(planoId, userId);
      });
    });
  });
</script>

