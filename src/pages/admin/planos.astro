---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getPlanos } from '../../lib/db.js';

// Obtener los planos de la base de datos
let planos = [];
try {
  const result = await getPlanos();
  planos = result;
} catch (error) {
  console.error("Error al obtener planos:", error);
}
---

<AdminLayout title="Gestión de Planos" activeLink="planos">
<div class="flex flex-col gap-6">
  <div class="flex items-center justify-between">
    <div class="flex flex-col gap-2">
      <h1 class="text-2xl font-bold tracking-tight">Gestión de Planos</h1>
      <p class="text-muted-foreground">
        Administre los planos disponibles para los clientes.
      </p>
    </div>
    <a href="/admin/subir" class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-4 w-4">
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
        <polyline points="17 8 12 3 7 8"></polyline>
        <line x1="12" y1="3" x2="12" y2="15"></line>
      </svg>
      Subir Plano
    </a>
  </div>
  
  <!-- Filtros de búsqueda -->
  <div class="rounded-lg border shadow-sm p-4">
    <div class="flex flex-col md:flex-row gap-4">
      <div class="flex-1">
        <label for="buscarNombre" class="text-sm font-medium mb-1 block">Buscar por nombre de plano</label>
        <input 
          type="text" 
          id="buscarNombre" 
          placeholder="Nombre del plano..." 
          class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
        />
      </div>
      <div class="flex-1">
        <label for="buscarCliente" class="text-sm font-medium mb-1 block">Buscar por nombre de cliente</label>
        <input 
          type="text" 
          id="buscarCliente" 
          placeholder="Nombre del cliente..." 
          class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
        />
      </div>
      <div class="flex-1">
        <label for="filtrarTipo" class="text-sm font-medium mb-1 block">Filtrar por tipo</label>
        <select 
          id="filtrarTipo" 
          class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
        >
          <option value="">Todos los tipos</option>
          <option value="Arquitectónico">Arquitectónico</option>
          <option value="Estructural">Estructural</option>
          <option value="Eléctrico">Eléctrico</option>
          <option value="Hidráulico">Hidráulico</option>
          <option value="Sanitario">Sanitario</option>
          <option value="Otro">Otro</option>
        </select>
      </div>
    </div>
  </div>
  
  <div class="rounded-lg border shadow-sm">
    <div class="p-4">
      {planos.length === 0 ? (
        <div class="text-center py-8">
          <p class="text-muted-foreground">No hay planos disponibles. Sube tu primer plano.</p>
        </div>
      ) : (
        <div class="relative w-full overflow-auto">
          <table class="w-full caption-bottom text-sm">
            <thead class="[&_tr]:border-b">
              <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Nombre</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Cliente</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Tipo</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Fecha Subida</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Acciones</th>
              </tr>
            </thead>
            <tbody id="planosTableBody" class="[&_tr:last-child]:border-0">
              {planos.map((plano: any) => (
                <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted plano-row" 
                    data-nombre={plano.nombre.toLowerCase()} 
                    data-cliente={plano.cliente_nombre ? plano.cliente_nombre.toLowerCase() : ''} 
                    data-tipo={plano.tipo.toLowerCase()}>
                  <td class="p-4 align-middle">{plano.nombre}</td>
                  <td class="p-4 align-middle">{plano.cliente_nombre || `ID: ${plano.usuario_id}`}</td>
                  <td class="p-4 align-middle">{plano.tipo}</td>
                  <td class="p-4 align-middle">{new Date(plano.fecha_subida).toLocaleDateString()}</td>
                  <td class="p-4 align-middle">
                    <div class="flex gap-2">
                      <a 
                        href={plano.archivo_url} 
                        target="_blank" 
                        class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                      >
                        Ver
                      </a>
                      <a 
                        href={`/admin/editar-plano/${plano.id}`}
                        class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                      >
                        Editar
                      </a>
                      <button 
                        type="button"
                        class="eliminar-plano inline-flex h-9 items-center justify-center rounded-md bg-destructive px-3 py-2 text-sm font-medium text-destructive-foreground shadow-sm hover:bg-destructive/90"
                        data-id={plano.id}
                        data-nombre={plano.nombre}
                      >
                        Eliminar
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          <!-- Mensaje cuando no hay resultados de búsqueda -->
          <div id="noResultados" class="hidden text-center py-8">
            <p class="text-muted-foreground">No se encontraron planos que coincidan con los criterios de búsqueda.</p>
          </div>
        </div>
      )}
    </div>
  </div>
</div>

<!-- Modal de confirmación para eliminar -->
<div id="eliminarModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg p-6 w-full max-w-md">
    <h3 class="text-lg font-bold mb-4">Confirmar eliminación</h3>
    <p id="eliminarMensaje" class="mb-6">¿Está seguro de que desea eliminar este plano?</p>
    <div class="flex justify-end gap-4">
      <button id="cancelarEliminar" class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
        Cancelar
      </button>
      <button id="confirmarEliminar" class="inline-flex h-9 items-center justify-center rounded-md bg-destructive px-3 py-2 text-sm font-medium text-destructive-foreground shadow-sm hover:bg-destructive/90">
        Eliminar
      </button>
    </div>
  </div>
</div>
</AdminLayout>

<script is:inline>
  // Variable global para almacenar el ID del plano a eliminar
  let planoIdAEliminar = null;
  
  // Función para mostrar el modal de eliminación
  function mostrarModalEliminar(id, nombre) {
    console.log('Mostrar modal para eliminar plano:', id, nombre);
    
    planoIdAEliminar = id;
    
    // Actualizar el mensaje del modal
    const eliminarMensaje = document.getElementById('eliminarMensaje');
    if (eliminarMensaje) {
      eliminarMensaje.textContent = `¿Está seguro de que desea eliminar el plano "${nombre}"?`;
    }
    
    // Mostrar el modal
    const eliminarModal = document.getElementById('eliminarModal');
    if (eliminarModal) {
      eliminarModal.classList.remove('hidden');
    }
  }
  
  // Función para eliminar un plano
  function eliminarPlano(id) {
    console.log('Eliminando plano con ID:', id);
    
    fetch('/api/eliminar-plano', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ id: id }),
    })
    .then(response => {
      console.log('Respuesta recibida:', response);
      return response.json();
    })
    .then(data => {
      console.log('Datos recibidos:', data);
      if (data.success) {
        alert('Plano eliminado correctamente');
        // Recargar la página para mostrar la lista actualizada
        window.location.reload();
      } else {
        alert(`Error: ${data.error || 'No se pudo eliminar el plano'}`);
        const eliminarModal = document.getElementById('eliminarModal');
        if (eliminarModal) {
          eliminarModal.classList.add('hidden');
        }
      }
    })
    .catch(error => {
      console.error('Error al eliminar el plano:', error);
      alert('Error al eliminar el plano. Por favor, inténtelo de nuevo.');
      const eliminarModal = document.getElementById('eliminarModal');
      if (eliminarModal) {
        eliminarModal.classList.add('hidden');
      }
    });
  }
  
  // Función para filtrar planos
  function filtrarPlanos() {
    const buscarNombreInput = document.getElementById('buscarNombre');
    const buscarClienteInput = document.getElementById('buscarCliente');
    const filtrarTipoSelect = document.getElementById('filtrarTipo');
    
    if (!buscarNombreInput || !buscarClienteInput || !filtrarTipoSelect) return;
    
    const buscarNombre = buscarNombreInput.value.toLowerCase();
    const buscarCliente = buscarClienteInput.value.toLowerCase();
    const filtrarTipo = filtrarTipoSelect.value.toLowerCase();
    
    const filas = document.querySelectorAll('.plano-row');
    let hayResultados = false;
    
    filas.forEach(fila => {
      const nombre = fila.getAttribute('data-nombre') || '';
      const cliente = fila.getAttribute('data-cliente') || '';
      const tipo = fila.getAttribute('data-tipo') || '';
      
      // Aplicar filtros
      const coincideNombre = !buscarNombre || nombre.includes(buscarNombre);
      const coincideCliente = !buscarCliente || cliente.includes(buscarCliente);
      const coincideTipo = !filtrarTipo || tipo === filtrarTipo;
      
      // Mostrar u ocultar la fila según los filtros
      if (coincideNombre && coincideCliente && coincideTipo) {
        fila.style.display = '';
        hayResultados = true;
      } else {
        fila.style.display = 'none';
      }
    });
    
    // Mostrar mensaje de "no hay resultados" si es necesario
    const noResultados = document.getElementById('noResultados');
    if (noResultados) {
      if (hayResultados) {
        noResultados.classList.add('hidden');
      } else {
        noResultados.classList.remove('hidden');
      }
    }
  }
  
  // Función para inicializar todos los eventos
  function inicializarEventos() {
    console.log('Inicializando eventos...');
    
    // Configurar eventos para los botones de eliminar
    document.querySelectorAll('.eliminar-plano').forEach(btn => {
      btn.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        const nombre = this.getAttribute('data-nombre');
        if (id && nombre) {
          mostrarModalEliminar(id, nombre);
        }
      });
    });
    
    // Configurar evento para el botón de cancelar eliminación
    const cancelarEliminar = document.getElementById('cancelarEliminar');
    if (cancelarEliminar) {
      cancelarEliminar.addEventListener('click', function() {
        console.log('Cancelar eliminación');
        const eliminarModal = document.getElementById('eliminarModal');
        if (eliminarModal) {
          eliminarModal.classList.add('hidden');
        }
        planoIdAEliminar = null;
      });
    }
    
    // Configurar evento para el botón de confirmar eliminación
    const confirmarEliminar = document.getElementById('confirmarEliminar');
    if (confirmarEliminar) {
      confirmarEliminar.addEventListener('click', function() {
        console.log('Confirmar eliminación');
        if (planoIdAEliminar) {
          eliminarPlano(planoIdAEliminar);
        }
      });
    }
    
    // Configurar evento para cerrar el modal al hacer clic en el fondo
    const eliminarModal = document.getElementById('eliminarModal');
    if (eliminarModal) {
      eliminarModal.addEventListener('click', function(e) {
        if (e.target === this) {
          this.classList.add('hidden');
          planoIdAEliminar = null;
        }
      });
    }
    
    // Configurar eventos para los filtros
    const buscarNombre = document.getElementById('buscarNombre');
    const buscarCliente = document.getElementById('buscarCliente');
    const filtrarTipo = document.getElementById('filtrarTipo');
    
    if (buscarNombre) buscarNombre.addEventListener('input', filtrarPlanos);
    if (buscarCliente) buscarCliente.addEventListener('input', filtrarPlanos);
    if (filtrarTipo) filtrarTipo.addEventListener('change', filtrarPlanos);
  }
  
  // Asegurarse de que los eventos se inicialicen cuando el DOM esté cargado
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', inicializarEventos);
  } else {
    inicializarEventos();
  }
</script>

