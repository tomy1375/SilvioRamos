---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getUsers } from '../../lib/db.js';

// Añadir más logs detallados para depurar el problema
let usuarios = [];
try {
  console.log("Obteniendo usuarios desde la base de datos...");
  const result = await getUsers();
  console.log(`Se encontraron ${result.length} usuarios en la base de datos`);
  console.log("Usuarios encontrados:", JSON.stringify(result));
  usuarios = result;

  // Verificar que los usuarios se están asignando correctamente
  console.log("Usuarios asignados a la variable:", usuarios.length);
  console.log("Primer usuario:", usuarios.length > 0 ? JSON.stringify(usuarios[0]) : "No hay usuarios");
} catch (error) {
  console.error("Error al obtener usuarios:", error);
}
---

<AdminLayout title="Gestión de Usuarios" activeLink="usuarios">
<div class="flex flex-col gap-6">
  <div class="flex items-center justify-between">
    <div class="flex flex-col gap-2">
      <h1 class="text-2xl font-bold tracking-tight">Gestión de Usuarios</h1>
      <p class="text-muted-foreground">
        Administre los usuarios del sistema.
      </p>
    </div>
    <a href="/admin/nuevo-usuario" class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-4 w-4">
        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
        <circle cx="9" cy="7" r="4"></circle>
        <line x1="19" x2="19" y1="8" y2="14"></line>
        <line x1="22" x2="16" y1="11" y2="11"></line>
      </svg>
      Nuevo Usuario
    </a>
  </div>
  <div class="rounded-lg border shadow-sm">
    <div class="p-4">
      {usuarios.length === 0 ? (
        <div class="text-center py-8">
          <p class="text-muted-foreground">No hay usuarios disponibles. Cree su primer usuario.</p>
        </div>
      ) : (
        <div class="relative w-full overflow-auto">
          <table class="w-full caption-bottom text-sm">
            <thead class="[&_tr]:border-b">
              <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">ID</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Nombre</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Email</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Tipo</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Empresa</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Acciones</th>
              </tr>
            </thead>
            <tbody class="[&_tr:last-child]:border-0">
              {usuarios.map((usuario: any) => (
                <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                  <td class="p-4 align-middle">{usuario.id}</td>
                  <td class="p-4 align-middle">{usuario.nombre}</td>
                  <td class="p-4 align-middle">{usuario.email}</td>
                  <td class="p-4 align-middle">{usuario.tipo}</td>
                  <td class="p-4 align-middle">{usuario.empresa || '-'}</td>
                  <td class="p-4 align-middle">
                    <div class="flex gap-2">
                      <a 
                        href={`/admin/editar-usuario/${usuario.id}`}
                        class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                      >
                        Editar
                      </a>
                      <button 
                        type="button"
                        class="eliminar-usuario inline-flex h-9 items-center justify-center rounded-md bg-destructive px-3 py-2 text-sm font-medium text-destructive-foreground shadow-sm hover:bg-destructive/90"
                        data-id={usuario.id}
                        data-nombre={usuario.nombre}
                      >
                        Eliminar
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  </div>
</div>

<!-- Modal de confirmación para eliminar -->
<div id="eliminarModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg p-6 w-full max-w-md">
    <h3 class="text-lg font-bold mb-4">Confirmar eliminación</h3>
    <p id="eliminarMensaje" class="mb-6">¿Está seguro de que desea eliminar este usuario?</p>
    <div class="flex justify-end gap-4">
      <button id="cancelarEliminar" class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
        Cancelar
      </button>
      <button id="confirmarEliminar" class="inline-flex h-9 items-center justify-center rounded-md bg-destructive px-3 py-2 text-sm font-medium text-destructive-foreground shadow-sm hover:bg-destructive/90">
        Eliminar
      </button>
    </div>
  </div>
</div>
</AdminLayout>

<script>
  // Variable global para almacenar el ID del usuario a eliminar
  let usuarioIdAEliminar = null;
  
  // Función para mostrar el modal de eliminación de usuario
  function mostrarModalEliminarUsuario(id, nombre) {
    console.log('Mostrar modal para eliminar usuario:', id, nombre);
    
    usuarioIdAEliminar = id;
    
    // Actualizar el mensaje del modal
    const eliminarMensaje = document.getElementById('eliminarMensaje');
    if (eliminarMensaje) {
      eliminarMensaje.textContent = `¿Está seguro de que desea eliminar el usuario "${nombre}"?`;
    }
    
    // Mostrar el modal
    const eliminarModal = document.getElementById('eliminarModal');
    if (eliminarModal) {
      eliminarModal.classList.remove('hidden');
    }
  }
  
  // Función para eliminar un usuario
  function eliminarUsuario(id) {
    console.log('Eliminando usuario con ID:', id);
    
    fetch('/api/eliminar-usuario', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ id: id }),
    })
    .then(response => {
      console.log('Respuesta recibida:', response);
      return response.json();
    })
    .then(data => {
      console.log('Datos recibidos:', data);
      if (data.success) {
        alert('Usuario eliminado correctamente');
        // Recargar la página para mostrar la lista actualizada
        window.location.reload();
      } else {
        alert(`Error: ${data.error || 'No se pudo eliminar el usuario'}`);
        const eliminarModal = document.getElementById('eliminarModal');
        if (eliminarModal) {
          eliminarModal.classList.add('hidden');
        }
      }
    })
    .catch(error => {
      console.error('Error al eliminar el usuario:', error);
      alert('Error al eliminar el usuario. Por favor, inténtelo de nuevo.');
      const eliminarModal = document.getElementById('eliminarModal');
      if (eliminarModal) {
        eliminarModal.classList.add('hidden');
      }
    });
  }
  
  // Inicializar eventos cuando el DOM esté cargado
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM cargado, inicializando eventos de usuarios...');
    
    // Configurar eventos para los botones de eliminar
    document.querySelectorAll('.eliminar-usuario').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        const nombre = btn.getAttribute('data-nombre');
        mostrarModalEliminarUsuario(id, nombre);
      });
    });
    
    // Configurar evento para el botón de cancelar eliminación
    const cancelarEliminar = document.getElementById('cancelarEliminar');
    if (cancelarEliminar) {
      cancelarEliminar.addEventListener('click', () => {
        console.log('Cancelar eliminación de usuario');
        const eliminarModal = document.getElementById('eliminarModal');
        if (eliminarModal) {
          eliminarModal.classList.add('hidden');
        }
        usuarioIdAEliminar = null;
      });
    }
    
    // Configurar evento para el botón de confirmar eliminación
    const confirmarEliminar = document.getElementById('confirmarEliminar');
    if (confirmarEliminar) {
      confirmarEliminar.addEventListener('click', () => {
        console.log('Confirmar eliminación de usuario');
        if (usuarioIdAEliminar) {
          eliminarUsuario(usuarioIdAEliminar);
        }
      });
    }
    
    // Configurar evento para cerrar el modal al hacer clic en el fondo
    const eliminarModal = document.getElementById('eliminarModal');
    if (eliminarModal) {
      eliminarModal.addEventListener('click', (e) => {
        if (e.target === eliminarModal) {
          eliminarModal.classList.add('hidden');
          usuarioIdAEliminar = null;
        }
      });
    }
  });
</script>

