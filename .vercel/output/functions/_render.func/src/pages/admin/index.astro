---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getPlanos, getUsers } from '../../lib/db.js';
import Swal from 'sweetalert2';
// Definir interfaces para los tipos
interface Plano {
  id: number;
  nombre: string;
  tipo: string;
  fecha_subida: string;
  archivo_url: string;
  usuario_id: number;
  cliente_nombre?: string;
  descripcion?: string;
}

interface Usuario {
  id: number;
  nombre: string;
  email: string;
  tipo: string;
  empresa?: string;
  telefono?: string;
}

// Obtener estadísticas
let totalPlanos = 0;
let totalUsuarios = 0;
let ultimosPlanos: Plano[] = [];
let clientes: Usuario[] = [];

try {
  const planos = await getPlanos();
  totalPlanos = planos.length;
  ultimosPlanos = planos.slice(0, 5); // Obtener los últimos 5 planos

  const usuarios = await getUsers();
  totalUsuarios = usuarios.length;

  // Filtrar solo los usuarios de tipo cliente (insensible a mayúsculas/minúsculas)
  clientes = usuarios.filter((usuario: Usuario) => 
    usuario.tipo && usuario.tipo.toLowerCase() === 'cliente'
  ).slice(0, 5); // Mostrar solo los 5 primeros clientes
} catch (error) {
  console.error("Error al obtener estadísticas:", error);
}
---

<!-- Cambiamos activeLink a "planos" que es uno de los valores permitidos -->
<AdminLayout title="Dashboard" activeLink="planos">
<div class="flex flex-col gap-6">
  <div class="flex flex-col gap-2">
    <h1 class="text-2xl font-bold tracking-tight">Dashboard</h1>
    <p class="text-muted-foreground">
      Bienvenido al panel de administración.
    </p>
  </div>

  <!-- Tarjetas de estadísticas -->
  <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
    <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
      <div class="flex flex-col space-y-1.5">
        <h3 class="text-sm font-medium text-muted-foreground">Total de Planos</h3>
        <div class="text-2xl font-bold">{totalPlanos}</div>
      </div>
    </div>
    
    <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
      <div class="flex flex-col space-y-1.5">
        <h3 class="text-sm font-medium text-muted-foreground">Total de Usuarios</h3>
        <div class="text-2xl font-bold">{totalUsuarios}</div>
      </div>
    </div>
    
    <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
      <div class="flex flex-col space-y-1.5">
        <h3 class="text-sm font-medium text-muted-foreground">Descargas Hoy</h3>
        <div class="text-2xl font-bold">0</div>
      </div>
    </div>
    
    <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
      <div class="flex flex-col space-y-1.5">
        <h3 class="text-sm font-medium text-muted-foreground">Planos Esta Semana</h3>
        <div class="text-2xl font-bold">0</div>
      </div>
    </div>
  </div>

  <!-- Últimos planos -->
  <div class="rounded-lg border shadow-sm">
    <div class="p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold">Últimos Planos Subidos</h2>
        <a 
          href="/admin/planos" 
          class="text-sm text-primary hover:underline"
        >
          Ver todos los planos
        </a>
      </div>
      
      {ultimosPlanos.length === 0 ? (
        <p class="text-muted-foreground">No hay planos disponibles.</p>
      ) : (
        <div class="relative w-full overflow-auto">
          <table class="w-full caption-bottom text-sm">
            <thead class="[&_tr]:border-b">
              <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Nombre</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Cliente</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Tipo</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Fecha</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Acciones</th>
              </tr>
            </thead>
            <tbody class="[&_tr:last-child]:border-0">
              {ultimosPlanos.map((plano) => (
                <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                  <td class="p-4 align-middle">{plano.nombre}</td>
                  <td class="p-4 align-middle">{plano.cliente_nombre || `ID: ${plano.usuario_id}`}</td>
                  <td class="p-4 align-middle">{plano.tipo}</td>
                  <td class="p-4 align-middle">{new Date(plano.fecha_subida).toLocaleDateString()}</td>
                  <td class="p-4 align-middle">
                    <div class="flex gap-2">
                      <a 
                        href={plano.archivo_url} 
                        target="_blank" 
                        class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                      >
                        Ver
                      </a>
                      <a 
                        href={`/admin/editar-plano/${plano.id}`}
                        class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                      >
                        Editar
                      </a>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  </div>

  <!-- Clientes -->
  <div class="rounded-lg border shadow-sm">
    <div class="p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold">Clientes</h2>
        <div class="flex gap-2">
          <a 
            href="/admin/usuarios" 
            class="text-sm text-primary hover:underline"
          >
            Ver todos los usuarios
          </a>
          <a 
            href="/admin/nuevo-usuario" 
            class="inline-flex h-9 items-center justify-center rounded-md bg-primary px-3 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-4 w-4">
              <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <line x1="19" x2="19" y1="8" y2="14"></line>
              <line x1="22" x2="16" y1="11" y2="11"></line>
            </svg>
            Nuevo Usuario
          </a>
        </div>
      </div>
      
      {clientes.length === 0 ? (
        <p class="text-muted-foreground">No hay clientes disponibles.</p>
      ) : (
        <div class="relative w-full overflow-auto">
          <table class="w-full caption-bottom text-sm">
            <thead class="[&_tr]:border-b">
              <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">ID</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Nombre</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Email</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Empresa</th>
                <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Acciones</th>
              </tr>
            </thead>
            <tbody id="clientesTableBody" class="[&_tr:last-child]:border-0">
              {clientes.map((cliente) => (
                <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted cliente-row" data-id={cliente.id.toString()}>
                  <td class="p-4 align-middle">{cliente.id}</td>
                  <td class="p-4 align-middle">{cliente.nombre}</td>
                  <td class="p-4 align-middle">{cliente.email}</td>
                  <td class="p-4 align-middle">{cliente.empresa || '-'}</td>
                  <td class="p-4 align-middle">
                    <div class="flex gap-2">
                      <a 
                        href={`/admin/editar-usuario/${cliente.id}`}
                        class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                      >
                        Editar
                      </a>
                      <button 
                        type="button"
                        class="eliminar-usuario inline-flex h-9 items-center justify-center rounded-md bg-destructive px-3 py-2 text-sm font-medium text-destructive-foreground shadow-sm hover:bg-destructive/90"
                        data-id={cliente.id.toString()}
                        data-nombre={cliente.nombre}
                      >
                        Eliminar
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  </div>
</div>
</AdminLayout>

<!-- Incluir SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
import Swal from "sweetalert2";

document.addEventListener('DOMContentLoaded', function() {
  // Configurar eventos para los botones de eliminar
  document.querySelectorAll('.eliminar-usuario').forEach(function(boton) {
    boton.addEventListener('click', function() {
      const id = this.getAttribute('data-id');
      const nombre = this.getAttribute('data-nombre');
      const fila = this.closest('tr');
      
      // Usar SweetAlert2 para la confirmación
      Swal.fire({
        title: '¿Está seguro?',
        text: `¿Desea eliminar el usuario "${nombre}"?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      }).then((result) => {
        if (result.isConfirmed) {
          eliminarUsuario(id, fila);
        }
      });
    });
  });
  
  // Función para eliminar un usuario
  function eliminarUsuario(id, fila) {
    // Mostrar indicador de carga
    Swal.fire({
      title: 'Eliminando...',
      text: 'Por favor espere',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    fetch('/api/eliminar-usuario', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ id: id }),
    })
    .then(function(response) {
      return response.json();
    })
    .then(function(data) {
      if (data.success) {
        // Eliminar la fila de la tabla sin recargar la página
        if (fila) {
          fila.remove();
        }
        
        // Verificar si la tabla está vacía
        const tbody = document.getElementById('clientesTableBody');
        if (tbody && tbody.children.length === 0) {
          // Si no hay más clientes, mostrar mensaje
          const container = tbody.closest('.relative');
          if (container) {
            container.innerHTML = `
              <p class="text-muted-foreground p-4">No hay clientes disponibles.</p>
            `;
          }
        }
        
        // Mostrar mensaje de éxito
        Swal.fire({
          title: '¡Eliminado!',
          text: 'El usuario ha sido eliminado correctamente.',
          icon: 'success',
          confirmButtonColor: '#3085d6'
        });
      } else {
        Swal.fire({
          title: 'Error',
          text: data.error || 'No se pudo eliminar el usuario',
          icon: 'error',
          confirmButtonColor: '#3085d6'
        });
      }
    })
    .catch(function(error) {
      console.error('Error al eliminar el usuario:', error);
      Swal.fire({
        title: 'Error',
        text: 'Error al eliminar el usuario. Por favor, inténtelo de nuevo.',
        icon: 'error',
        confirmButtonColor: '#3085d6'
      });
    });
  }
});
</script>

