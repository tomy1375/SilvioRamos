---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getUsers, getPlanosByUserId } from '../../lib/db.js';

// Definir interfaces para los tipos
interface Plano {
  id: number;
  nombre: string;
  tipo: string;
  fecha_subida: string;
  archivo_url: string;
  usuario_id: number;
  descripcion?: string;
}

interface Usuario {
  id: number;
  nombre: string;
  email: string;
  tipo: string;
  empresa?: string;
  telefono?: string;
}

// Obtener todos los usuarios de tipo cliente
let clientes: Usuario[] = [];
try {
  const usuarios = await getUsers();
  clientes = usuarios.filter((usuario: Usuario) => 
    usuario.tipo && usuario.tipo.toLowerCase() === 'cliente'
  );
} catch (error) {
  console.error("Error al obtener usuarios:", error);
}

// Variable para almacenar los planos del usuario seleccionado
let planosUsuario: Plano[] = [];
let usuarioSeleccionado: Usuario | null = null;
let error: string | null = null;

// Verificar si se ha seleccionado un usuario
const usuarioId = Astro.url.searchParams.get('usuario');
if (usuarioId) {
  try {
    // Obtener los planos del usuario seleccionado
    planosUsuario = await getPlanosByUserId(parseInt(usuarioId));
    
    // Obtener información del usuario seleccionado
    usuarioSeleccionado = clientes.find(cliente => cliente.id === parseInt(usuarioId)) || null;
  } catch (err) {
    console.error("Error al obtener planos del usuario:", err);
    error = "Error al cargar los planos del usuario. Por favor, inténtelo de nuevo.";
  }
}
---

<AdminLayout title="Planos por Usuario" activeLink="planos">
  <div class="flex flex-col gap-6">
    <div class="flex flex-col gap-2">
      <h1 class="text-2xl font-bold tracking-tight">Planos por Usuario</h1>
      <p class="text-muted-foreground">
        Visualice y gestione los planos asignados a cada usuario.
      </p>
    </div>
    
    <!-- Selector de usuario -->
    <div class="rounded-lg border shadow-sm p-6">
      <form id="seleccionarUsuarioForm" class="space-y-4">
        <div class="space-y-2">
          <label for="usuario" class="text-sm font-medium leading-none">Seleccionar Usuario</label>
          <div class="flex gap-4">
            <select 
              id="usuario" 
              name="usuario" 
              class="flex h-10 flex-1 rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            >
              <option value="">Seleccione un usuario</option>
              {clientes.map((cliente) => (
                <option value={cliente.id} selected={usuarioSeleccionado && usuarioSeleccionado.id === cliente.id}>
                  {cliente.nombre} ({cliente.email})
                </option>
              ))}
            </select>
            <button 
              type="submit" 
              class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
            >
              Ver Planos
            </button>
          </div>
        </div>
      </form>
    </div>
    
    {error && (
      <div class="bg-destructive/15 text-destructive p-4 rounded-md">
        <p>{error}</p>
      </div>
    )}
    
    {usuarioSeleccionado && (
      <div class="rounded-lg border shadow-sm">
        <div class="p-6">
          <h2 class="text-xl font-semibold mb-4">
            Planos de {usuarioSeleccionado.nombre}
          </h2>
          
          {planosUsuario.length === 0 ? (
            <p class="text-muted-foreground">Este usuario no tiene planos asignados.</p>
          ) : (
            <div class="relative w-full overflow-auto">
              <table class="w-full caption-bottom text-sm">
                <thead class="[&_tr]:border-b">
                  <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Nombre</th>
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Tipo</th>
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Fecha</th>
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Acciones</th>
                  </tr>
                </thead>
                <tbody class="[&_tr:last-child]:border-0">
                  {planosUsuario.map((plano) => (
                    <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted" data-id={plano.id}>
                      <td class="p-4 align-middle">{plano.nombre}</td>
                      <td class="p-4 align-middle">{plano.tipo}</td>
                      <td class="p-4 align-middle">{new Date(plano.fecha_subida).toLocaleDateString()}</td>
                      <td class="p-4 align-middle">
                        <div class="flex gap-2">
                          <a 
                            href={plano.archivo_url} 
                            target="_blank" 
                            class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                          >
                            Ver
                          </a>
                          <a 
                            href={`/admin/editar-plano/${plano.id}`}
                            class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50"
                          >
                            Editar
                          </a>
                          <button 
                            type="button"
                            class="eliminar-plano inline-flex h-9 items-center justify-center rounded-md bg-destructive px-3 py-2 text-sm font-medium text-destructive-foreground shadow-sm hover:bg-destructive/90"
                            data-id={plano.id.toString()}
                            data-nombre={plano.nombre}
                          >
                            Eliminar
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    )}
  </div>
</AdminLayout>

<script>
import Swal from "sweetalert2";

document.addEventListener('DOMContentLoaded', function() {
  // Configurar el formulario de selección de usuario
  const form = document.getElementById('seleccionarUsuarioForm');
  if (form) {
    form.addEventListener('submit', function(e: Event) {
      e.preventDefault();
      const usuarioSelect = document.getElementById('usuario') as HTMLSelectElement;
      if (usuarioSelect && usuarioSelect.value) {
        window.location.href = `/admin/planos-por-usuario?usuario=${usuarioSelect.value}`;
      }
    });
  }
  
  // Configurar eventos para los botones de eliminar
  document.querySelectorAll('.eliminar-plano').forEach(function(boton) {
    boton.addEventListener('click', function(this: HTMLElement) {
      const id = this.getAttribute('data-id');
      const nombre = this.getAttribute('data-nombre');
      const fila = this.closest('tr') as HTMLElement;
      
      // Usar SweetAlert2 para la confirmación
      Swal.fire({
        title: '¿Está seguro?',
        text: `¿Desea eliminar el plano "${nombre}"?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      }).then((result) => {
        if (result.isConfirmed) {
          eliminarPlano(id, fila);
        }
      });
    });
  });
  
  // Función para eliminar un plano
  function eliminarPlano(id: string | null, fila: HTMLElement) {
    // Mostrar indicador de carga
    Swal.fire({
      title: 'Eliminando...',
      text: 'Por favor espere',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    fetch('/api/eliminar-plano', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ id: id }),
    })
    .then(function(response) {
      return response.json();
    })
    .then(function(data) {
      if (data.success) {
        // Eliminar la fila de la tabla sin recargar la página
        if (fila) {
          fila.remove();
        }
        
        // Verificar si la tabla está vacía
        const tbody = fila.parentElement;
        if (tbody && tbody.children.length === 0) {
          // Si no hay más planos, mostrar mensaje
          const container = tbody.closest('.relative');
          if (container) {
            container.innerHTML = `
              <p class="text-muted-foreground p-4">Este usuario no tiene planos asignados.</p>
            `;
          }
        }
        
        // Mostrar mensaje de éxito
        Swal.fire({
          title: '¡Eliminado!',
          text: 'El plano ha sido eliminado correctamente.',
          icon: 'success',
          confirmButtonColor: '#3085d6'
        });
      } else {
        Swal.fire({
          title: 'Error',
          text: data.error || 'No se pudo eliminar el plano',
          icon: 'error',
          confirmButtonColor: '#3085d6'
        });
      }
    })
    .catch(function(error) {
      console.error('Error al eliminar el plano:', error);
      Swal.fire({
        title: 'Error',
        text: 'Error al eliminar el plano. Por favor, inténtelo de nuevo.',
        icon: 'error',
        confirmButtonColor: '#3085d6'
      });
    });
  }
});
</script>

