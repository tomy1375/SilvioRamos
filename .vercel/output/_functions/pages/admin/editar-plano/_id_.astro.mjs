/* empty css                                               */
import { c as createComponent, d as createAstro, b as renderTemplate, r as renderComponent, m as maybeRenderHead, e as addAttribute } from '../../../chunks/astro/server_dC-6T-Kg.mjs';
import 'kleur/colors';
import { $ as $$AdminLayout } from '../../../chunks/AdminLayout_78FMoF68.mjs';
import { g as getPlanoById, a as getUsers } from '../../../chunks/db_69Mb4jww.mjs';
export { renderers } from '../../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$id = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$id;
  const { id } = Astro2.params;
  let plano = null;
  let error = null;
  let usuarios = [];
  try {
    console.log("Intentando obtener plano con ID:", id);
    if (id) {
      plano = await getPlanoById(parseInt(id));
      console.log("Resultado de getPlanoById:", plano);
      if (!plano) {
        error = "Plano no encontrado";
      }
    } else {
      error = "ID de plano no proporcionado";
    }
    usuarios = await getUsers();
    console.log(`Se encontraron ${usuarios.length} usuarios`);
    usuarios = usuarios.filter(
      (usuario) => usuario.tipo && usuario.tipo.toLowerCase() === "cliente"
    );
    console.log(`Despu\xE9s de filtrar, quedan ${usuarios.length} clientes`);
  } catch (e) {
    console.error("Error al obtener datos:", e);
    error = "Error al cargar los datos";
  }
  return renderTemplate(_a || (_a = __template(["", " <script>\n  // Funci\xF3n para guardar los cambios del plano\n  function guardarCambiosPlano() {\n    console.log('Guardando cambios del plano...');\n    \n    // Obtener el formulario\n    const form = document.getElementById('editarPlanoForm');\n    \n    if (form) {\n      // Obtener los datos del formulario\n      const formData = new FormData(form);\n      \n      const id = formData.get('id');\n      const nombre = formData.get('nombre');\n      const tipo = formData.get('tipo');\n      const cliente = formData.get('cliente');\n      const descripcion = formData.get('descripcion');\n      \n      // Mostrar los datos que se van a enviar (para depuraci\xF3n)\n      console.log('Enviando datos:', { id, nombre, tipo, usuario_id: cliente, descripcion });\n      \n      // Enviar los datos al servidor\n      fetch('/api/actualizar-plano', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id,\n          nombre,\n          tipo,\n          usuario_id: cliente,\n          descripcion,\n        }),\n      })\n      .then(response => {\n        console.log('Respuesta recibida:', response);\n        return response.json();\n      })\n      .then(data => {\n        console.log('Datos recibidos:', data);\n        if (data.success) {\n          alert('Plano actualizado correctamente');\n          window.location.href = '/admin/planos';\n        } else {\n          alert(`Error: ${data.error || 'No se pudo actualizar el plano'}`);\n        }\n      })\n      .catch(error => {\n        console.error('Error al actualizar el plano:', error);\n        alert('Error al actualizar el plano. Por favor, int\xE9ntelo de nuevo.');\n      });\n    } else {\n      console.error('Formulario no encontrado');\n    }\n  }\n  \n  // Asignar el evento al bot\xF3n inmediatamente\n  document.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM cargado, inicializando eventos...');\n    \n    const guardarBtn = document.getElementById('guardarCambios');\n    if (guardarBtn) {\n      console.log('Bot\xF3n de guardar encontrado, agregando evento click');\n      guardarBtn.addEventListener('click', guardarCambiosPlano);\n    } else {\n      console.error('Bot\xF3n de guardar no encontrado');\n    }\n  });\n  \n  // Tambi\xE9n asignar el evento inmediatamente por si el DOM ya est\xE1 cargado\n  const guardarBtn = document.getElementById('guardarCambios');\n  if (guardarBtn) {\n    console.log('Bot\xF3n de guardar encontrado (fuera de DOMContentLoaded), agregando evento click');\n    guardarBtn.addEventListener('click', guardarCambiosPlano);\n  }\n<\/script>"], ["", " <script>\n  // Funci\xF3n para guardar los cambios del plano\n  function guardarCambiosPlano() {\n    console.log('Guardando cambios del plano...');\n    \n    // Obtener el formulario\n    const form = document.getElementById('editarPlanoForm');\n    \n    if (form) {\n      // Obtener los datos del formulario\n      const formData = new FormData(form);\n      \n      const id = formData.get('id');\n      const nombre = formData.get('nombre');\n      const tipo = formData.get('tipo');\n      const cliente = formData.get('cliente');\n      const descripcion = formData.get('descripcion');\n      \n      // Mostrar los datos que se van a enviar (para depuraci\xF3n)\n      console.log('Enviando datos:', { id, nombre, tipo, usuario_id: cliente, descripcion });\n      \n      // Enviar los datos al servidor\n      fetch('/api/actualizar-plano', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id,\n          nombre,\n          tipo,\n          usuario_id: cliente,\n          descripcion,\n        }),\n      })\n      .then(response => {\n        console.log('Respuesta recibida:', response);\n        return response.json();\n      })\n      .then(data => {\n        console.log('Datos recibidos:', data);\n        if (data.success) {\n          alert('Plano actualizado correctamente');\n          window.location.href = '/admin/planos';\n        } else {\n          alert(\\`Error: \\${data.error || 'No se pudo actualizar el plano'}\\`);\n        }\n      })\n      .catch(error => {\n        console.error('Error al actualizar el plano:', error);\n        alert('Error al actualizar el plano. Por favor, int\xE9ntelo de nuevo.');\n      });\n    } else {\n      console.error('Formulario no encontrado');\n    }\n  }\n  \n  // Asignar el evento al bot\xF3n inmediatamente\n  document.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM cargado, inicializando eventos...');\n    \n    const guardarBtn = document.getElementById('guardarCambios');\n    if (guardarBtn) {\n      console.log('Bot\xF3n de guardar encontrado, agregando evento click');\n      guardarBtn.addEventListener('click', guardarCambiosPlano);\n    } else {\n      console.error('Bot\xF3n de guardar no encontrado');\n    }\n  });\n  \n  // Tambi\xE9n asignar el evento inmediatamente por si el DOM ya est\xE1 cargado\n  const guardarBtn = document.getElementById('guardarCambios');\n  if (guardarBtn) {\n    console.log('Bot\xF3n de guardar encontrado (fuera de DOMContentLoaded), agregando evento click');\n    guardarBtn.addEventListener('click', guardarCambiosPlano);\n  }\n<\/script>"])), renderComponent($$result, "AdminLayout", $$AdminLayout, { "title": "Editar Plano", "activeLink": "planos" }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="flex flex-col gap-6"> <div class="flex flex-col gap-2"> <h1 class="text-2xl font-bold tracking-tight">Editar Plano</h1> <p class="text-muted-foreground">
Modifique los detalles del plano seleccionado.
</p> </div> ${error && renderTemplate`<div class="bg-destructive/15 text-destructive p-4 rounded-md"> <p>${error}</p> <a href="/admin/planos" class="text-primary hover:underline mt-2 inline-block">Volver a la lista de planos</a> </div>`} ${plano && renderTemplate`<div class="rounded-lg border shadow-sm"> <div class="p-6"> <form id="editarPlanoForm" class="space-y-6"> <input type="hidden" name="id"${addAttribute(plano.id, "value")}> <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> <div class="space-y-2"> <label for="nombre" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Nombre del Plano</label> <input type="text" id="nombre" name="nombre"${addAttribute(plano.nombre, "value")} required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> </div> <div class="space-y-2"> <label for="tipo" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Tipo de Plano</label> <select id="tipo" name="tipo" required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> <option value="Arquitectónico"${addAttribute(plano.tipo === "Arquitect\xF3nico", "selected")}>Arquitectónico</option> <option value="Estructural"${addAttribute(plano.tipo === "Estructural", "selected")}>Estructural</option> <option value="Eléctrico"${addAttribute(plano.tipo === "El\xE9ctrico", "selected")}>Eléctrico</option> <option value="Hidráulico"${addAttribute(plano.tipo === "Hidr\xE1ulico", "selected")}>Hidráulico</option> <option value="Sanitario"${addAttribute(plano.tipo === "Sanitario", "selected")}>Sanitario</option> <option value="Otro"${addAttribute(plano.tipo === "Otro", "selected")}>Otro</option> </select> </div> <div class="space-y-2"> <label for="cliente" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Cliente</label> <select id="cliente" name="cliente" required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> ${usuarios.map((usuario) => renderTemplate`<option${addAttribute(usuario.id, "value")}${addAttribute(usuario.id === plano.usuario_id, "selected")}>${usuario.nombre}</option>`)} </select> </div> <div class="space-y-2"> <label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Archivo Actual</label> <div class="flex items-center gap-2"> <a${addAttribute(plano.archivo_url, "href")} target="_blank" class="inline-flex h-9 items-center justify-center rounded-md border border-input bg-background px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
Ver archivo actual
</a> <span class="text-sm text-muted-foreground">(No se puede cambiar el archivo)</span> </div> </div> </div> <div class="space-y-2"> <label for="descripcion" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Descripción</label> <textarea id="descripcion" name="descripcion" rows="4" class="flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">${plano.descripcion}</textarea> </div> <div class="flex justify-end gap-4"> <a href="/admin/planos" class="inline-flex h-10 items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
Cancelar
</a> <button type="button" id="guardarCambios" class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
Guardar Cambios
</button> </div> </form> </div> </div>`} </div> ` }));
}, "E:/TrabajosProgramador/Silvio Ramos/ingecivil-website/src/pages/admin/editar-plano/[id].astro", void 0);

const $$file = "E:/TrabajosProgramador/Silvio Ramos/ingecivil-website/src/pages/admin/editar-plano/[id].astro";
const $$url = "/admin/editar-plano/[id]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$id,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
