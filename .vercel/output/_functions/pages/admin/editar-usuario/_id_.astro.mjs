/* empty css                                               */
import { c as createComponent, d as createAstro, b as renderTemplate, r as renderComponent, m as maybeRenderHead, e as addAttribute } from '../../../chunks/astro/server_dC-6T-Kg.mjs';
import 'kleur/colors';
import { $ as $$AdminLayout } from '../../../chunks/AdminLayout_78FMoF68.mjs';
import { b as getUserById } from '../../../chunks/db_69Mb4jww.mjs';
export { renderers } from '../../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$id = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$id;
  const { id } = Astro2.params;
  let usuario = null;
  let error = null;
  try {
    console.log("Intentando obtener usuario con ID:", id);
    if (id) {
      usuario = await getUserById(parseInt(id));
      console.log("Resultado de getUserById:", usuario ? "Usuario encontrado" : "Usuario no encontrado");
      if (!usuario) {
        error = "Usuario no encontrado";
      }
    } else {
      error = "ID de usuario no proporcionado";
    }
  } catch (e) {
    console.error("Error al obtener datos del usuario:", e);
    error = "Error al cargar los datos del usuario";
  }
  return renderTemplate(_a || (_a = __template(["", " <script>\n  // Funci\xF3n para guardar los cambios del usuario\n  function guardarCambiosUsuario() {\n    console.log('Guardando cambios del usuario...');\n    \n    // Obtener el formulario\n    const form = document.getElementById('editarUsuarioForm');\n    \n    if (form) {\n      // Obtener los datos del formulario como FormData\n      const formData = new FormData(form);\n      \n      const id = formData.get('id');\n      const nombre = formData.get('nombre');\n      const email = formData.get('email');\n      const tipo = formData.get('tipo');\n      const telefono = formData.get('telefono');\n      const empresa = formData.get('empresa');\n      const password = formData.get('password');\n      \n      // Crear el objeto de datos a enviar\n      const userData = {\n        id,\n        nombre,\n        email,\n        tipo,\n        telefono: telefono || null,\n        empresa: empresa || null,\n      };\n      \n      // A\xF1adir la contrase\xF1a solo si se ha proporcionado una nueva\n      if (password && password.toString().trim() !== '') {\n        userData.password = password;\n      }\n      \n      // Mostrar los datos que se van a enviar (para depuraci\xF3n)\n      console.log('Enviando datos:', { ...userData, password: password ? '******' : undefined });\n      \n      // Enviar los datos al servidor\n      fetch('/api/actualizar-usuario', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      })\n      .then(response => {\n        console.log('Respuesta recibida:', response);\n        return response.json();\n      })\n      .then(data => {\n        console.log('Datos recibidos:', data);\n        if (data.success) {\n          alert('Usuario actualizado correctamente');\n          window.location.href = '/admin/usuarios';\n        } else {\n          alert(`Error: ${data.error || 'No se pudo actualizar el usuario'}`);\n        }\n      })\n      .catch(error => {\n        console.error('Error al actualizar el usuario:', error);\n        alert('Error al actualizar el usuario. Por favor, int\xE9ntelo de nuevo.');\n      });\n    } else {\n      console.error('Formulario no encontrado');\n    }\n  }\n  \n  // Asignar el evento al bot\xF3n inmediatamente\n  document.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM cargado, inicializando eventos...');\n    \n    const guardarBtn = document.getElementById('guardarCambios');\n    if (guardarBtn) {\n      console.log('Bot\xF3n de guardar encontrado, agregando evento click');\n      guardarBtn.addEventListener('click', guardarCambiosUsuario);\n    } else {\n      console.error('Bot\xF3n de guardar no encontrado');\n    }\n  });\n  \n  // Tambi\xE9n asignar el evento inmediatamente por si el DOM ya est\xE1 cargado\n  const guardarBtn = document.getElementById('guardarCambios');\n  if (guardarBtn) {\n    console.log('Bot\xF3n de guardar encontrado (fuera de DOMContentLoaded), agregando evento click');\n    guardarBtn.addEventListener('click', guardarCambiosUsuario);\n  }\n<\/script>"], ["", " <script>\n  // Funci\xF3n para guardar los cambios del usuario\n  function guardarCambiosUsuario() {\n    console.log('Guardando cambios del usuario...');\n    \n    // Obtener el formulario\n    const form = document.getElementById('editarUsuarioForm');\n    \n    if (form) {\n      // Obtener los datos del formulario como FormData\n      const formData = new FormData(form);\n      \n      const id = formData.get('id');\n      const nombre = formData.get('nombre');\n      const email = formData.get('email');\n      const tipo = formData.get('tipo');\n      const telefono = formData.get('telefono');\n      const empresa = formData.get('empresa');\n      const password = formData.get('password');\n      \n      // Crear el objeto de datos a enviar\n      const userData = {\n        id,\n        nombre,\n        email,\n        tipo,\n        telefono: telefono || null,\n        empresa: empresa || null,\n      };\n      \n      // A\xF1adir la contrase\xF1a solo si se ha proporcionado una nueva\n      if (password && password.toString().trim() !== '') {\n        userData.password = password;\n      }\n      \n      // Mostrar los datos que se van a enviar (para depuraci\xF3n)\n      console.log('Enviando datos:', { ...userData, password: password ? '******' : undefined });\n      \n      // Enviar los datos al servidor\n      fetch('/api/actualizar-usuario', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      })\n      .then(response => {\n        console.log('Respuesta recibida:', response);\n        return response.json();\n      })\n      .then(data => {\n        console.log('Datos recibidos:', data);\n        if (data.success) {\n          alert('Usuario actualizado correctamente');\n          window.location.href = '/admin/usuarios';\n        } else {\n          alert(\\`Error: \\${data.error || 'No se pudo actualizar el usuario'}\\`);\n        }\n      })\n      .catch(error => {\n        console.error('Error al actualizar el usuario:', error);\n        alert('Error al actualizar el usuario. Por favor, int\xE9ntelo de nuevo.');\n      });\n    } else {\n      console.error('Formulario no encontrado');\n    }\n  }\n  \n  // Asignar el evento al bot\xF3n inmediatamente\n  document.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM cargado, inicializando eventos...');\n    \n    const guardarBtn = document.getElementById('guardarCambios');\n    if (guardarBtn) {\n      console.log('Bot\xF3n de guardar encontrado, agregando evento click');\n      guardarBtn.addEventListener('click', guardarCambiosUsuario);\n    } else {\n      console.error('Bot\xF3n de guardar no encontrado');\n    }\n  });\n  \n  // Tambi\xE9n asignar el evento inmediatamente por si el DOM ya est\xE1 cargado\n  const guardarBtn = document.getElementById('guardarCambios');\n  if (guardarBtn) {\n    console.log('Bot\xF3n de guardar encontrado (fuera de DOMContentLoaded), agregando evento click');\n    guardarBtn.addEventListener('click', guardarCambiosUsuario);\n  }\n<\/script>"])), renderComponent($$result, "AdminLayout", $$AdminLayout, { "title": "Editar Usuario", "activeLink": "usuarios" }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="flex flex-col gap-6"> <div class="flex flex-col gap-2"> <h1 class="text-2xl font-bold tracking-tight">Editar Usuario</h1> <p class="text-muted-foreground">
Modifique los detalles del usuario seleccionado.
</p> </div> ${error && renderTemplate`<div class="bg-destructive/15 text-destructive p-4 rounded-md"> <p>${error}</p> <a href="/admin/usuarios" class="text-primary hover:underline mt-2 inline-block">Volver a la lista de usuarios</a> </div>`} ${usuario && renderTemplate`<div class="rounded-lg border shadow-sm"> <div class="p-6"> <form id="editarUsuarioForm" class="space-y-6"> <input type="hidden" name="id"${addAttribute(usuario.id, "value")}> <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> <div class="space-y-2"> <label for="nombre" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Nombre</label> <input type="text" id="nombre" name="nombre"${addAttribute(usuario.nombre, "value")} required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> </div> <div class="space-y-2"> <label for="email" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Email</label> <input type="email" id="email" name="email"${addAttribute(usuario.email, "value")} required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> </div> <div class="space-y-2"> <label for="tipo" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Tipo de Usuario</label> <select id="tipo" name="tipo" required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> <option value="admin"${addAttribute(usuario.tipo === "admin" || usuario.tipo === "Admin", "selected")}>Administrador</option> <option value="cliente"${addAttribute(usuario.tipo === "cliente" || usuario.tipo === "Cliente", "selected")}>Cliente</option> </select> </div> <div class="space-y-2"> <label for="telefono" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Teléfono</label> <input type="tel" id="telefono" name="telefono"${addAttribute(usuario.telefono || "", "value")} class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> </div> <div class="space-y-2"> <label for="empresa" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Empresa</label> <input type="text" id="empresa" name="empresa"${addAttribute(usuario.empresa || "", "value")} class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> </div> <div class="space-y-2"> <label for="password" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Nueva Contraseña (dejar en blanco para mantener la actual)</label> <input type="password" id="password" name="password" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"> </div> </div> <div class="flex justify-end gap-4"> <a href="/admin/usuarios" class="inline-flex h-10 items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
Cancelar
</a> <button type="button" id="guardarCambios" class="inline-flex h-10 items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50">
Guardar Cambios
</button> </div> </form> </div> </div>`} </div> ` }));
}, "E:/TrabajosProgramador/Silvio Ramos/ingecivil-website/src/pages/admin/editar-usuario/[id].astro", void 0);

const $$file = "E:/TrabajosProgramador/Silvio Ramos/ingecivil-website/src/pages/admin/editar-usuario/[id].astro";
const $$url = "/admin/editar-usuario/[id]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$id,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
